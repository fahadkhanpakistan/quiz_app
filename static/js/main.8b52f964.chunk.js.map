{"version":3,"sources":["components/QuestionsContext.js","components/question/Question.js","App.js","reportWebVitals.js","index.js"],"names":["QuizQuestions","React","createContext","Loading","Score","Index","ViewScore","Questions","children","useState","quizQuestions","setQuestions","loading","setLoading","score","setScore","currentIndex","setCurrentIndex","viewScore","setViewScore","useEffect","axios","get","then","res","data","results","catch","err","console","log","Provider","value","Question","ansOptions","shuffled","useContext","setQuizQuestions","setShowQuestionns","incorrect_answers","correct_answer","array","randomIndex","length","Math","floor","random","shuffle","className","justify","lg","span","offset","md","xs","sm","Title","level","he","decode","question","style","backgroundColor","map","ans","index","type","shape","block","size","onClick","checkAnswer","ellipsis","visible","closeIcon","CloseOutlined","color","footer","onCancel","window","location","reload","bodyStyle","centered","width","Text","strong","icon","UndoOutlined","App","loadingStatus","LoadingOutlined","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b52f964.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n//Contexts\r\n\r\n// for all questions\r\nconst QuizQuestions = React.createContext();\r\nconst useQuizQuestions = () => React.useContext(QuizQuestions);\r\n\r\n//loading status\r\nconst Loading = React.createContext();\r\nconst useLoading = () => React.useContext(Loading);\r\n\r\n//score status\r\nconst Score = React.createContext();\r\nconst useScore = () => React.useContext(Score);\r\n\r\n//index status\r\nconst Index = React.createContext();\r\nconst useIndex = () => React.useContext(Index);\r\n\r\n//View Score\r\nconst ViewScore = React.createContext();\r\nconst useViewScore = () => React.useContext(ViewScore);\r\n\r\n//Component\r\nconst Questions = ({ children }) => {\r\n\tconst [quizQuestions, setQuestions] = useState(null);\r\n\tconst [loading, setLoading] = useState(true);\r\n\tconst [score, setScore] = useState(0);\r\n\tconst [currentIndex, setCurrentIndex] = useState(0);\r\n\tconst [viewScore, setViewScore] = useState(false);\r\n\r\n\tuseEffect(() => {\r\n\t\taxios\r\n\t\t\t.get(\r\n\t\t\t\t'https://opentdb.com/api.php?amount=10&category=18&difficulty=medium&type=multiple'\r\n\t\t\t)\r\n\t\t\t.then(res => {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tsetQuestions(res.data.results);\r\n\t\t\t})\r\n\t\t\t.catch(err => console.log('SOME WENT WRONG!', err));\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<QuizQuestions.Provider value={{ quizQuestions, setQuestions }}>\r\n\t\t\t<Loading.Provider value={loading}>\r\n\t\t\t\t<Score.Provider value={{ score, setScore }}>\r\n\t\t\t\t\t<Index.Provider value={{ currentIndex, setCurrentIndex }}>\r\n\t\t\t\t\t\t<ViewScore.Provider value={{ viewScore, setViewScore }}>\r\n\t\t\t\t\t\t\t{children}\r\n\t\t\t\t\t\t</ViewScore.Provider>\r\n\t\t\t\t\t</Index.Provider>\r\n\t\t\t\t</Score.Provider>\r\n\t\t\t</Loading.Provider>\r\n\t\t</QuizQuestions.Provider>\r\n\t);\r\n};\r\n\r\nexport default Questions;\r\nexport {\r\n\tuseQuizQuestions,\r\n\tuseLoading,\r\n\tuseScore,\r\n\tuseIndex,\r\n\tuseViewScore,\r\n};\r\n","import { Row, Col, Button, Typography, Divider, Modal } from 'antd';\r\nimport { CloseOutlined, UndoOutlined } from '@ant-design/icons';\r\nimport {\r\n\tuseQuizQuestions,\r\n\tuseIndex,\r\n\tuseScore,\r\n\tuseViewScore,\r\n} from '../QuestionsContext';\r\nimport he from 'he';\r\nimport { useState } from 'react';\r\n\r\nconst Question = () => {\r\n\tlet { quizQuestions, setQuizQuestions } = useQuizQuestions();\r\n\tlet { currentIndex, setCurrentIndex } = useIndex();\r\n\tlet { score, setScore } = useScore();\r\n\tlet { viewScore, setViewScore } = useViewScore();\r\n\tconst [showQuestions, setShowQuestionns] = useState(true);\r\n\r\n\t//make array of ans\r\n\tlet ansOptions;\r\n\tlet shuffled;\r\n\r\n\tif (quizQuestions) {\r\n\t\tansOptions = [\r\n\t\t\t...quizQuestions[currentIndex].incorrect_answers,\r\n\t\t\tquizQuestions[currentIndex].correct_answer,\r\n\t\t];\r\n\t}\r\n\r\n\tconst checkAnswer = ans => {\r\n\t\tif (\r\n\t\t\t(currentIndex > 0 || currentIndex === 0) &&\r\n\t\t\tcurrentIndex < quizQuestions.length - 1\r\n\t\t) {\r\n\t\t\tsetCurrentIndex(currentIndex + 1);\r\n\t\t\tif (ans === quizQuestions[currentIndex].correct_answer) {\r\n\t\t\t\tsetScore(score + 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (currentIndex === quizQuestions.length - 1) {\r\n\t\t\tsetViewScore(true);\r\n\t\t}\r\n\t};\r\n\r\n\tfunction shuffle(array) {\r\n\t\tlet length = array.length,\r\n\t\t\trandomIndex;\r\n\t\t// While there remain elements to shuffle...\r\n\t\twhile (length !== 0) {\r\n\t\t\t// Pick a remaining element...\r\n\t\t\trandomIndex = Math.floor(Math.random() * length);\r\n\t\t\tlength--;\r\n\t\t\t// And swap it with the current element.\r\n\t\t\t[array[length], array[randomIndex]] = [\r\n\t\t\t\tarray[randomIndex],\r\n\t\t\t\tarray[length],\r\n\t\t\t];\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\tif (quizQuestions) {\r\n\t\tshuffled = shuffle(ansOptions);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Row className='question-container' justify='center'>\r\n\t\t\t{quizQuestions && (\r\n\t\t\t\t<Col\r\n\t\t\t\t\tlg={{ span: 24, offset: 0 }}\r\n\t\t\t\t\tmd={{ span: 24, offset: 0 }}\r\n\t\t\t\t\txs={{ span: 24, offset: 0 }}\r\n\t\t\t\t\tsm={{ span: 24, offset: 0 }}\r\n\t\t\t\t\tclassName='col'\r\n\t\t\t\t>\r\n\t\t\t\t\t<Typography.Title level={2} className='question-info'>\r\n\t\t\t\t\t\tQuestion {currentIndex + 1}/{quizQuestions.length}\r\n\t\t\t\t\t</Typography.Title>\r\n\t\t\t\t\t<Typography.Title level={3} className='question'>\r\n\t\t\t\t\t\t{he.decode(quizQuestions[currentIndex].question)}\r\n\t\t\t\t\t</Typography.Title>\r\n\t\t\t\t\t<Divider style={{ backgroundColor: '#ddd' }} />\r\n\t\t\t\t\t<div className='option-container'>\r\n\t\t\t\t\t\t{shuffled.map((ans, index) => (\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t\ttype='primary'\r\n\t\t\t\t\t\t\t\tclassName='option'\r\n\t\t\t\t\t\t\t\tshape='round'\r\n\t\t\t\t\t\t\t\tblock\r\n\t\t\t\t\t\t\t\tsize='large'\r\n\t\t\t\t\t\t\t\tonClick={() => checkAnswer(ans)}\r\n\t\t\t\t\t\t\t\tellipsis={true}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{he.decode(ans)}\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Col>\r\n\t\t\t)}\r\n\t\t\t<Modal\r\n\t\t\t\tvisible={viewScore}\r\n\t\t\t\tcloseIcon={<CloseOutlined style={{ color: '#ddd' }} />}\r\n\t\t\t\tfooter={false}\r\n\t\t\t\tonCancel={() => {\r\n\t\t\t\t\tsetViewScore(false);\r\n\t\t\t\t\tsetShowQuestionns(false);\r\n\t\t\t\t\twindow.location.reload(false);\r\n\t\t\t\t}}\r\n\t\t\t\tbodyStyle={{ backgroundColor: '#333' }}\r\n\t\t\t\tcentered={true}\r\n\t\t\t\twidth='600px'\r\n\t\t\t>\r\n\t\t\t\t<div className='modal-content'>\r\n\t\t\t\t\t<Typography.Title level={3}>\r\n\t\t\t\t\t\tYou Have Scored{' '}\r\n\t\t\t\t\t\t<Typography.Text strong={true} className='score-rate'>\r\n\t\t\t\t\t\t\t{score}\r\n\t\t\t\t\t\t</Typography.Text>{' '}\r\n\t\t\t\t\t\tOut Of{' '}\r\n\t\t\t\t\t\t<Typography.Text strong={true} className='score-rate'>\r\n\t\t\t\t\t\t\t10\r\n\t\t\t\t\t\t</Typography.Text>{' '}\r\n\t\t\t\t\t</Typography.Title>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\ttype='primary'\r\n\t\t\t\t\t\ticon={<UndoOutlined />}\r\n\t\t\t\t\t\tonClick={() => window.location.reload(false)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tPlay Again\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</Modal>\r\n\t\t</Row>\r\n\t);\r\n};\r\n\r\nexport default Question;\r\n","import { useLoading } from './components/QuestionsContext';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport Question from './components/question/Question';\n\nfunction App() {\n\tlet loadingStatus = useLoading();\n\t// let { score, setScore } = useScore();\n\n\treturn (\n\t\t<div className='app'>\n\t\t\t{loadingStatus ? (\n\t\t\t\t<div className='loading'>\n\t\t\t\t\t<LoadingOutlined className='loading-icon' />\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div className='quiz-card'>\n\t\t\t\t\t<Question />\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Questions from './components/QuestionsContext';\n\nimport 'antd/dist/antd.less';\n\nimport './styles/index.less';\nimport './styles/modifiedAntd.less';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Questions>\n\t\t\t<App />\n\t\t</Questions>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}